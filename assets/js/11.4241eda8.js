(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{358:function(v,_,a){"use strict";a.r(_);var e=a(15),t=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"《深入理解java虚拟机》阅读笔记"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#《深入理解java虚拟机》阅读笔记"}},[v._v("#")]),v._v(" 《深入理解Java虚拟机》阅读笔记")]),v._v(" "),_("h2",{attrs:{id:"_1-虚拟机介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-虚拟机介绍"}},[v._v("#")]),v._v(" 1. 虚拟机介绍")]),v._v(" "),_("h3",{attrs:{id:"虚拟机家族"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机家族"}},[v._v("#")]),v._v(" 虚拟机家族")]),v._v(" "),_("blockquote",[_("p",[v._v("Sun Classic")])]),v._v(" "),_("blockquote",[_("p",[v._v("HostSPot VM")])]),v._v(" "),_("p",[v._v("经典虚拟机")]),v._v(" "),_("blockquote",[_("p",[v._v("Mobile / Embedded VM")])]),v._v(" "),_("p",[v._v("移动端/嵌入式使用")]),v._v(" "),_("blockquote",[_("p",[v._v("BEA JRockit / IBM J9 VM")])]),v._v(" "),_("p",[v._v("BEA/IBM公司自有虚拟机")]),v._v(" "),_("blockquote",[_("p",[v._v("...")])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"_2-内存区域与oom"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-内存区域与oom"}},[v._v("#")]),v._v(" 2.内存区域与OOM")]),v._v(" "),_("h3",{attrs:{id:"内存区域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存区域"}},[v._v("#")]),v._v(" 内存区域")]),v._v(" "),_("p",[v._v("java内存区域遵循《JAVA虚拟机规范》并由具体虚拟机进行划分和实现")]),v._v(" "),_("blockquote",[_("p",[v._v("程序计数器")])]),v._v(" "),_("p",[v._v("占用空间极小，用于指示执行时字节码行号\n各线程程序计数器私有，不存在OOM异常")]),v._v(" "),_("blockquote",[_("p",[v._v("java虚拟机栈")])]),v._v(" "),_("p",[v._v("描述的是JAVA方法执行的线程内存模型，方法执行时构造栈帧")]),v._v(" "),_("blockquote",[_("p",[v._v("栈帧包含：")])]),v._v(" "),_("ul",[_("li",[v._v("局部变量表")]),v._v(" "),_("li",[v._v("操作数栈")]),v._v(" "),_("li",[v._v("动态连接")]),v._v(" "),_("li",[v._v("方法出口")])]),v._v(" "),_("p",[_("strong",[v._v("hotSpot的虚拟机栈是不可以动态扩展的")]),v._v("\n当线程申请栈空间失败时，会出现OOM异常")]),v._v(" "),_("blockquote",[_("p",[v._v("可能出现的异常：")])]),v._v(" "),_("ul",[_("li",[v._v("线程请求时的栈深度大于虚拟机所允许的最大深度， 抛出StackOverflowError")]),v._v(" "),_("li",[v._v("如栈容量动态扩展，当无法申请到组后内存时，排除OOM Error")])]),v._v(" "),_("blockquote",[_("p",[v._v("本地方法栈")])]),v._v(" "),_("p",[v._v("为虚拟机使用到的本地方法（Native）服务\n抛出异常与虚拟机栈相同")]),v._v(" "),_("blockquote",[_("p",[v._v("JAVA堆")])]),v._v(" "),_("p",[v._v("虚拟机锁管理的内存中最大的一块区域，被所用线程共享、虚拟机启动时创建，用于存放对象实例（“所有的对象实例以及数组都应当在堆上分配”）\nJAVA堆也是垃圾收集器管理的内存区域，\n从回收内存角度，和垃圾分代收集理论，堆场被分配新生/老年/永久、eden/from/to等。HotSpot内部垃圾收集器基于经典分代设计。\n从分配内存角度，所有线程共享的java堆可以划分出多个线程私有的分配缓冲区（TLAB）以提高对象分配的效率")]),v._v(" "),_("ul",[_("li",[v._v("经典分代\n即新生代（包含一个eden区和两个survivor区）、老年代划分")])]),v._v(" "),_("blockquote",[_("p",[v._v("JAVA方法区")])]),v._v(" "),_("p",[v._v("各个线程共享的内存区域，主要用于存放被虚拟机加载的类型信息、常量、静态变量、即时编译后的代码缓存等\n《JAVA虚拟机规范》中方法区的描述是堆的一块逻辑部分\njdk1.8以前，HotSpot虚拟机的方法区的实现称为永久代，部分数据占用堆内存\n1.8及之后，HotSpot虚拟机方法区的实现称为元空间，使用本地内存")]),v._v(" "),_("p",[v._v("在方法区的垃圾回收主要目的是针对常量池的回收和对类型的卸载，类型的未完全回收有概率引发内存泄漏，从而造成OOM异常")]),v._v(" "),_("h3",{attrs:{id:"对象的创建"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对象的创建"}},[v._v("#")]),v._v(" 对象的创建")]),v._v(" "),_("ol",[_("li",[v._v("方法区检查Class类是否被加载，如果没被加载，则进行类文件加载")]),v._v(" "),_("li",[v._v("读取Class类元数据，分配堆空间给新对象\n"),_("ol",[_("li",[v._v("堆空间规整：指针碰撞")]),v._v(" "),_("li",[v._v("堆空间杂乱：空间列表")]),v._v(" "),_("li",[v._v("多线程并发：TLAB OR CAS+失败重试")])])]),v._v(" "),_("li",[v._v("分配的内存空间归零处理，")]),v._v(" "),_("li",[v._v("根据类元空间设置对象头信息，")]),v._v(" "),_("li",[v._v("调用"),_("code",[v._v("<init>()")]),v._v("方法，完成对象资源的初始化")])]),v._v(" "),_("p",[v._v("对象构成： [对象头] + [实例数据] + [对齐填充]")]),v._v(" "),_("blockquote",[_("p",[v._v("对象头")])]),v._v(" "),_("p",[v._v("针对于HotSpot虚拟机，对象头由动态数据结构(Mark work)和类型指针组成")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("动态数据结构\n一个有着动态定义的数据结构，根据对象的状态复用自己的存储空间\n用于存储对象自身的运行时数据，如哈希码、GC分代年龄、锁状态标识、偏向锁线程ID、偏向锁时间戳等等\n"),_("strong",[v._v("数据长度")]),v._v("：32比特（32位系统）、64比特（64位系统）")]),v._v(" "),_("p",[v._v("Mark work")])]),v._v(" "),_("li",[_("p",[v._v("对象哈希码（25bit）")])]),v._v(" "),_("li",[_("p",[v._v("对象分代年龄（4bit）")])]),v._v(" "),_("li",[_("p",[v._v("锁标志位（2bit）")])]),v._v(" "),_("li",[_("p",[v._v("固定0（1bit）")])]),v._v(" "),_("li",[_("p",[v._v("类型指针\n对象指向它的类型元数据的指针，java通过这个指针来确定该对象是哪个类的实例")])])]),v._v(" "),_("p",[_("strong",[v._v("如果对象是一个java数组，那么在对象头中还必须有一块用于记录数组长度的数据。")])]),v._v(" "),_("blockquote",[_("p",[v._v("对象的访问定位")])]),v._v(" "),_("ol",[_("li",[v._v("使用句柄池间接访问堆中对象")]),v._v(" "),_("li",[v._v("使用直接指针指向堆中对象")])]),v._v(" "),_("h3",{attrs:{id:"调试参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调试参数"}},[v._v("#")]),v._v(" 调试参数")]),v._v(" "),_("blockquote",[_("p",[v._v("用于堆")])]),v._v(" "),_("div",{staticClass:"language-shell line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-shell"}},[_("code",[v._v("设置堆最大值-Xms\n设置堆最小值-Xmx\n内存溢出时Dump出当前内存堆转储快照-XX:+HeapDumpOnOutOfMemoryError\n\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br")])]),_("blockquote",[_("p",[v._v("虚拟机栈")])]),v._v(" "),_("div",{staticClass:"language-shell line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-shell"}},[_("code",[v._v("设置栈容量-Xss \n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("blockquote",[_("p",[v._v("用于方法区")])]),v._v(" "),_("div",{staticClass:"language-shell line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-shell"}},[_("code",[_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<=")]),v._v("jdk6\n设置永久代最小-XX:PermSize\n"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">=")]),v._v(" jdk7\n设置永久代最大-XX:MaxPermSize\n"),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">=")]),v._v("jdk8\n设置元空间最大值-XX:MaxMetaspaceSize\n设置元空间初试大小-XX:MetaspaceSize\n控制垃圾收集后元空间最小剩余容量百分比-XX:MinMetaspaceFreeRatio\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br"),_("span",{staticClass:"line-number"},[v._v("7")]),_("br"),_("span",{staticClass:"line-number"},[v._v("8")]),_("br")])]),_("hr"),v._v(" "),_("h2",{attrs:{id:"_3-垃圾收集器与内存分配策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-垃圾收集器与内存分配策略"}},[v._v("#")]),v._v(" 3.垃圾收集器与内存分配策略")]),v._v(" "),_("h3",{attrs:{id:"垃圾收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器"}},[v._v("#")]),v._v(" 垃圾收集器")]),v._v(" "),_("blockquote",[_("p",[v._v("名词解释")])]),v._v(" "),_("p",[v._v("垃圾收集 (Garbage Collection)：GC，又可称为自动内存管理子系统")]),v._v(" "),_("h4",{attrs:{id:"对象回收判定"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对象回收判定"}},[v._v("#")]),v._v(" 对象回收判定")]),v._v(" "),_("blockquote",[_("p",[v._v("引用计数算法")])]),v._v(" "),_("p",[v._v("在对象中添加一个引用计数器，每当一个地方引用它时，计数器加一，引用失效时减一；当计数器值为零时即证明该对象不可能再被使用。\n"),_("strong",[v._v("优势：")])]),v._v(" "),_("ul",[_("li",[v._v("判定原理简单")]),v._v(" "),_("li",[v._v("判定效率高\n"),_("strong",[v._v("劣势：")])]),v._v(" "),_("li",[v._v("占用一些额外的内存空间")]),v._v(" "),_("li",[v._v("必须配合大量额外条件处理\n单纯的引用计数器很难解决对象之间相互循环引用的问题")])]),v._v(" "),_("blockquote",[_("p",[v._v("可达性分析算法")])]),v._v(" "),_("p",[v._v("当前主流的商用程序算法的内存管理子系统所使用的算法\n通过一系列被称为"),_("code",[v._v("GC Roots")]),v._v("的根对象作为起始节点集，从这些节点开始根据引用关系向下搜索，搜索过程所走过的路径称为"),_("code",[v._v("引用链")]),v._v("，当对象到"),_("code",[v._v("GC Roots")]),v._v("间没有任何引用链相连（从GC Roots到这个对象不可达时），则证明该对象不可能再被使用。")]),v._v(" "),_("p",[_("strong",[v._v("可作为GC Roots的对象：")])]),v._v(" "),_("ul",[_("li",[v._v("在虚拟机栈中引用的对象")]),v._v(" "),_("li",[v._v("在方法区中类静态属性引用的对象")]),v._v(" "),_("li",[v._v("在方法区中常量引用的对象")]),v._v(" "),_("li",[v._v("在本地方法栈中JNI引用的对象")]),v._v(" "),_("li",[v._v("虚拟机内部的引用")]),v._v(" "),_("li",[v._v("所有被同步锁持有的对象")]),v._v(" "),_("li",[v._v("反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等")]),v._v(" "),_("li",[v._v("垃圾收集器所设置的其他"),_("code",[v._v("临时性")]),v._v("对象")])]),v._v(" "),_("p",[_("code",[v._v("PS：")]),v._v("当进行分代收集、局部回收时，必须考虑到内存区域是虚拟机自己的实现细节，需要将被位于堆中其他区域相关引用的对象一并加入到GC Roots集合中去，才能保证可达性分析的正确性。")]),v._v(" "),_("blockquote",[_("p",[v._v("引用")])]),v._v(" "),_("p",[v._v("引用定义：\n"),_("strong",[v._v("在JDK1.2以前：")]),v._v(" 如果Reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称为该reference数据是代表某块内存、某个对象的引用。\n"),_("strong",[v._v("在JDK1.2以后：")]),v._v(" 将引用分为强引用、软引用、弱引用、虚引用。四种引用强度依次减弱。")]),v._v(" "),_("ul",[_("li",[v._v("强引用\n指在程序代码之中普遍存在的引用赋值，"),_("code",[v._v("e.g: Obeject obj = new Object()")]),v._v("\n只要该引用关系存在，垃圾收集器永远不会回收掉被引用的对象。")]),v._v(" "),_("li",[v._v("软引用\n描述一些还有用，但非必须的对象。\n只被软引用关联的对象，在系统将要发生内存溢出异常前，会将这些对象列进回收范围之内进行第二次回收，回收后重新进行内存溢出判断。\nJDK1.2后提供"),_("code",[v._v("SoftReference")]),v._v("类实现软引用。")]),v._v(" "),_("li",[v._v("弱引用\n描述一些还有用，但非必须的对象。但比软引用强度更弱。\n被弱引用关联的对象只能生存到下一次垃圾收集发生前\nJDK1.2后提供"),_("code",[v._v("WeakReference")]),v._v("类实现软引用。")]),v._v(" "),_("li",[v._v("虚引用\n一个对象是否有虚引用的存在，不会对其生存时间构成影响。\n唯一目的是为了能在引用对象被回收时收到一个系统通知\nJDK1.2后提供"),_("code",[v._v("PhantomReference")]),v._v("类实现软引用。")])]),v._v(" "),_("blockquote",[_("p",[v._v("回收前阶段")])]),v._v(" "),_("p",[v._v("当一个对象被判断为不可达对象时，在回收前还需要经过两次标记过程。")]),v._v(" "),_("ol",[_("li",[v._v("如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记")]),v._v(" "),_("li",[v._v("随后进行筛选，筛选条件是此对象是否有必要执行finalize()方法。\n"),_("ol",[_("li",[v._v("若该对象没有覆写finalize()方法，或finalize()方法已被虚拟机调用过，虚拟机将认为无需执行finalize()")]),v._v(" "),_("li",[v._v("在虚拟机执行finalize()方法时，该对象进入"),_("code",[v._v("F-Queue")]),v._v("队列中，稍后由虚拟机"),_("strong",[v._v("自动建立")]),v._v("、"),_("strong",[v._v("低调度优先级")]),v._v("的"),_("strong",[v._v("Finalizer线程")]),v._v("去执行finalize()方法\n执行指触发这个方法开始运行，但"),_("strong",[v._v("不保证一定会等待它运行结束")]),v._v("。")]),v._v(" "),_("li",[v._v("垃圾收集器将对F-Queue中的对象进行第二次小规模标记，如果对象重新与引用链中的对象建立关联，则移出"),_("code",[v._v("即将回收")]),v._v("的集合，否则对象被回收。")])])])]),v._v(" "),_("p",[v._v("注意：")]),v._v(" "),_("ul",[_("li",[v._v("Finalize()只会被系统调用一次。")]),v._v(" "),_("li",[v._v("finalize()是对象逃脱回收的最后一次机会。")]),v._v(" "),_("li",[v._v("不建议通过该方式使对象保持存活，使用"),_("code",[v._v("try-finally")]),v._v("或其他方式可以更好、更及时。")])]),v._v(" "),_("blockquote",[_("p",[v._v("回收方法区")])]),v._v(" "),_("p",[v._v("《Java虚拟机规范》：可以不要求虚拟机在方法区中实现垃圾收集。\n在Java堆中，尤其是新生代的常规垃圾收集通常可以回收70%至99%的内存空间。\n方法去垃圾收集主要回收部分")]),v._v(" "),_("ol",[_("li",[v._v("废弃的常量\n"),_("ol",[_("li",[v._v("当前系统中没有任何一个字符串对象引用常量池中的常量，且虚拟机中没有其他地方引用这个字面量，则该常量被系统清理出常量池。")]),v._v(" "),_("li",[v._v("常量池中的其他类、接口、方法、字段的符号引用类似。")])])]),v._v(" "),_("li",[v._v("不再使用的类型，如果该类同时满足三个条件，则"),_("strong",[v._v("允许")]),v._v("虚拟机对其进行回收：\n"),_("ol",[_("li",[v._v("该类所有的实例都已经被回收，即java堆中不存在该类及其"),_("strong",[v._v("任何派生子类")]),v._v("的实例。")]),v._v(" "),_("li",[v._v("加载该类的类加载器已经被回收。")]),v._v(" "),_("li",[v._v("该类对应的java.lang,Class对象灭有在任何地方被引用，即无法在任何地方通过反射访问该类的方法。")])])])]),v._v(" "),_("div",{staticClass:"language-bash line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 控制虚拟机是否对类型进行回收")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-Xnoclassgc")]),v._v("\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 查看类加载和卸载信息")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-verbose:class")]),v._v("  "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("#可以在Product版虚拟机中使用")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-XX:+TraceClassLoading")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("#可以在Product版虚拟机中使用")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-XX:+TraceClassUnLoading")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("#可以在FastDebug版虚拟机中使用")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br"),_("span",{staticClass:"line-number"},[v._v("7")]),_("br")])]),_("h4",{attrs:{id:"垃圾收集算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集算法"}},[v._v("#")]),v._v(" 垃圾收集算法")]),v._v(" "),_("p",[v._v("从如何判定对象消亡的角度出发，可以被分为：")]),v._v(" "),_("ul",[_("li",[v._v("引用计数式垃圾收集（Reference Counting GC），即直接垃圾收集")]),v._v(" "),_("li",[v._v("追踪式垃圾收集（Tracing GC），即间接垃圾收集")])]),v._v(" "),_("blockquote",[_("p",[v._v("分代收集理论")])]),v._v(" "),_("p",[v._v("基于两个分代假说所建立的"),_("code",[v._v("分代收集理论")]),v._v("被当前大多数的商业虚拟机的垃圾收集器所遵循。\n"),_("strong",[v._v("两个分代假说：")])]),v._v(" "),_("ol",[_("li",[v._v("弱分代假说：绝大多数对象都是朝生夕灭的；")]),v._v(" "),_("li",[v._v("强分代假说：熬过越多次垃圾收集过程的对象就越难以消亡；")])]),v._v(" "),_("p",[v._v("分代假说奠定垃圾收集器的设计原则：收集器应该将java堆划分出不同区域，然后将回收对象依据年龄分配到不同的区域中存储。\n（对于大多数对象，每次回收只需要关注少量存活，以较低代价回收到大量空间；\n对于难以消亡对象，较低频率回收，兼顾垃圾收集的时间开销和内存的空间利用率）")]),v._v(" "),_("p",[v._v("根据划分出的不同区域，进而出现Minor GC、Major GC、Full GC等回收类型，并发展出不同的回收算法。")]),v._v(" "),_("p",[v._v("对于当前的商用java虚拟机，一般将Java堆划分为新生代（Young Generation）和老年代（Old Generation）两个区域。\n对于新生代：\n每次垃圾收集都会有大量对象死亡，每次回收后存活的少量对象逐步晋升到老年代存放；\n初期HotSpot提供分代式垃圾收集器框架，但基于框架实现的收集器只有最早期的两组四款收集器；")]),v._v(" "),_("p",[v._v("由于存在新生代的对象可能会被老年代所引用，进而需要在固定的GC Roots之外，额外遍历争个老年代中所有对象来确保可达性分析结果的正确性，导致带来很大的性能负担，所以需要堆分代收集理论进行补充：\n"),_("strong",[v._v("补充分代假说：")]),v._v("\n3. 跨代引用假说：跨代引用相对于同代引用来说仅占极少数。\n即存在相互引用关系的两个对象，是应该倾向于同时生存或者同时消亡的。\n"),_("strong",[v._v("e.g：")]),v._v(" 某个新生代的对象存在跨代引用，由于老年代对象难以消亡，该引用会使新生代对象在收集时存活，随年龄增大后晋升到老年代中，此时跨代引用随即消除。")]),v._v(" "),_("p",[v._v("基于补充分代假说，只需要在新生代建立一个全局数据接口（记忆集）将老年代划分为若干小块，标识出老年代的哪一块内存会存在跨代引用。当发生Minor GC时，只有包含了跨代引用的小块内存里的对象才会被加入GC Roots中进行遍历扫描。\n该方式"),_("strong",[v._v("需要在对象改变引用关系时维护记录数据")]),v._v("的正确性，"),_("strong",[v._v("增加一些运行时开销")]),v._v("。")]),v._v(" "),_("blockquote",[_("p",[v._v("收集行为")])]),v._v(" "),_("ul",[_("li",[v._v("部分收集（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集。\n"),_("ul",[_("li",[v._v("新生代收集（Minor GC/Young GC）：指目标在新生代发生的垃圾收集")]),v._v(" "),_("li",[v._v("老年代收集（Major GC/Old GC）：指目标在老年代发生的垃圾收集；有单独收集老年代行为的收集器：CMS收集器")]),v._v(" "),_("li",[v._v("混合收集（Mixed GC）：目标是收集整个新生代以及部分老年代的垃圾收集。 有混合收集行为的收集器：G1收集器")])])]),v._v(" "),_("li",[v._v("整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。")])]),v._v(" "),_("blockquote",[_("p",[v._v("标记-清除算法")])]),v._v(" "),_("p",[v._v("在1960年由John McCarthy提出\n算法分为：标记、清除阶段：")]),v._v(" "),_("ol",[_("li",[v._v("标记阶段：标记出所有需要回收或存活的对象")]),v._v(" "),_("li",[v._v("清除阶段：标记完成后，统一回收掉所有被标记或未被标记的对象。")])]),v._v(" "),_("p",[_("strong",[v._v("缺陷：")])]),v._v(" "),_("ol",[_("li",[v._v("执行效率不稳定，标记清除阶段的执行效率随对象数量增长而降低")]),v._v(" "),_("li",[v._v("内存空间碎片化，标记-清除后产生大量不连续的内存碎片，空间碎片太多可能导致之后程序运行时无法找到组后的连续内存而不得不触发另一次垃圾收集动作。")])]),v._v(" "),_("blockquote",[_("p",[v._v("标记-复制算法")])]),v._v(" "),_("p",[v._v("==为解决标记-清除算法面对大量可回收对象时执行效率低的问题==\n1969年由Fenichel提出的一种称为半区复制的垃圾收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中一块，当当前块内存用完时就将还存活的对象复制到另一块上，然后将已使用过的内存空间一次清理掉。")]),v._v(" "),_("p",[v._v("分配内存时不用考虑有空间碎片的复杂情况，只需要移动堆顶指针，按顺序分配即可\n实现简单，运行高效\n"),_("strong",[v._v("缺陷：")])]),v._v(" "),_("ol",[_("li",[v._v("如果内存中多数对象都是存活的，这种算法将产生大量的内存间复制的开销。")]),v._v(" "),_("li",[v._v("可用内存缩小为原来的一半，空间利用率太低")])]),v._v(" "),_("p",[v._v("大多数虚拟机采用该算法在回收新生代时使用")]),v._v(" "),_("p",[v._v("在1989年， Andrew Appel针对“朝生夕灭”特点的对象，提出更优化的半区复制分代策略（Appel式回收）\nHotSpot的Serial、ParNew等新生代收集器均采用该策略来设计新生代的内存布局\n"),_("strong",[v._v("Appel式回收：")])]),v._v(" "),_("ol",[_("li",[v._v("把新生代分为一块较大的Eden空间和两块较小的Survivor空间")]),v._v(" "),_("li",[v._v("HotSpot默认Eden和Survivor大小比例是8:1，即可用内存为新生代的90%")]),v._v(" "),_("li",[v._v("每次分配内存只使用Eden和其中一块Survivor。")]),v._v(" "),_("li",[v._v("发生垃圾收集时，将Eden和使用的Survivor中仍存活的对象一次性复制到另一块Survivor中，然后直接清理掉Eden和使用过的Survivor")]),v._v(" "),_("li",[v._v("Appel式回收通过“"),_("strong",[v._v("逃生门")]),v._v("”的安全设计解决当回收的的对象多余新生代的10%时的问题：\n"),_("ol",[_("li",[v._v("当Survivor空间不足以容纳一次Minor GC之后存活的对象时，需要依赖其他内存区域进行"),_("strong",[v._v("分配担保")])]),v._v(" "),_("li",[v._v("多出的对象"),_("strong",[v._v("通过分配担保机制直接进入老年代")]),v._v("。")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("标记·整理算法")])]),v._v(" "),_("h4",{attrs:{id:"hotspot算法细节"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#hotspot算法细节"}},[v._v("#")]),v._v(" HotSpot算法细节")]),v._v(" "),_("blockquote",[_("p",[v._v("根节点枚举")])]),v._v(" "),_("blockquote",[_("p",[v._v("安全点及安全区域")])]),v._v(" "),_("p",[v._v("HotSpot只在特定的位置记录信息，这些位置被称为"),_("strong",[v._v("安全点")]),v._v("，\n也就决定了用户程序执行时并非在代码指令流的任意位置都能够停顿下来开始垃圾收集，而是"),_("strong",[v._v("强制要求必须执行到安全点后才能够暂停")]),v._v("。")]),v._v(" "),_("blockquote",[_("p",[v._v("记忆集与卡表")])]),v._v(" "),_("blockquote",[_("p",[v._v("写屏障")])]),v._v(" "),_("blockquote",[_("p",[v._v("并发可达性分析")])])])}),[],!1,null,null,null);_.default=t.exports}}]);